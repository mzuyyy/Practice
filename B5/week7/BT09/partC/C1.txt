a. char* reverse(const char *s)
{
    int n=strlen(s);
    char *res = new char [n+1];
    for (int i=0;i<n;i++)
    {
        res[i] = s[n-i-1];
    }
    return res;
}

b. char* delete_char(const char *a, char c) {
    int n = strlen(a);
    char *result = new char[n+1];
    int j = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] != c) {
            result[j++] = a[i];
        }
    }
    result[j] = '\0';
    return result;
}

c. char* pad_right(const char *s, int n){
    int len=strlen(s);
    char* res = new char [n+1];
    int j = 0;
    for (int i = 0; i < n; i++){
        if (i<len) res[j++] = s[i];
        else res[j++] = '_';
    }
    res[j] = '\0';
    return res;
}

d. char* pad_left(const char *s, int n){
    int len=strlen(s);
    char* res = new char [n+1];
    int j = 0;
    for (int i = 0; i < n; i++){
        if (i<n-len) res[j++] = '_';
        else res[j++] = s[i-(n-len)];
    }
    res[j] = '\0';
    return res;
}

e. char* truncate(const char *a, int n) {
    int len = strlen(a);
    if (len > n) {
        char *result = new char[n+1];
        strncpy(result, a, n);
        result[n] = '\0';
        return result;
    } else {
        return a;
    }
}

g. char* trim_left(const char *a) {
    int n = strlen(a);
    int i = 0;
    while (i < n && isspace(a[i])) {
        i++;
    }
    char *result = new char[n-i+1];
    strcpy(result, a+i); //copy from pos i
    return result;
}

h. char* trim_right(const char *a) {
    int n = strlen(a);
    int i = n - 1;
    while (i >= 0 && isspace(a[i])) {
        i--;
    }
    char *result = new char[i+2];
    strncpy(result, a, i+1); // copy from begin to i+1
    result[i+1] = '\0';
    return result;
}